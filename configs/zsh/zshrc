#!/bin/bash
alias recovery="if test -f ~/recovery; then rm -f ~/recovery && echo 'Recovery mode disabled'; else touch ~/recovery && echo 'Recovery mode enabled'; fi"
if test -f ~/recovery; then
  return
fi
DOTFILES_NAME=.dots

autoload -Uz compinit
autoload -Uz bashcompinit && bashcompinit
typeset -i updated_at=$(date +'%j' -r ~/.zcompdump 2>/dev/null || stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)
if test $(date +'%j') != $updated_at; then
  compinit -i
else
  compinit -C -i
fi

if ! test -f /usr/local/bin/antibody; then
  echo "installing antibody..."
  curl -sfL git.io/antibody | sudo sh -s - -b /usr/local/bin
fi

# Will use this instead of spaceship prompt when available for arm arch
# curl -fsSL https://starship.rs/install.sh | bash

setopt append_history # append history list to history file, rather than replace it
setopt hist_ignore_dups # don't record a command that just run
setopt hist_save_no_dups # don't save duplicate entries to history file
setopt hist_ignore_all_dups # remove older duplicate entries from history
setopt hist_reduce_blanks # remove superfluous blanks from history items
setopt hist_ignore_space # skip command with leading space
setopt share_history # share history between different instances of the shell

setopt auto_cd # cd by typing directory name if it's not a command
setopt correct # autocorrect commands

setopt auto_list # automatically list choices on ambiguous completion
setopt auto_menu # automatically use menu completion
setopt always_to_end # move cursor to end if word had one match
setopt complete_in_word # allow completion from within a word/phrase

zstyle ':completion:*' menu select # select completions with arrow keys
zstyle ':completion:*' group-name '' # group results by category
zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' accept-exact '*(N)' # Speedup path completion

# Cache expensive completions
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh

ZSH_TMUX_AUTOSTART=true
ZSH_TMUX_AUTOCONNECT=false
ZSH_TMUX_UNICODE=true

SPACESHIP_PROMPT_ORDER=(
  user
  dir
  git
  line_sep
  exit_code
  char
)
SPACESHIP_RPROMPT_ORDER=(
  time
  host
  exec_time
)
SPACESHIP_USER_SHOW=needed
SPACESHIP_HOST_PREFIX="on "
SPACESHIP_PROMPT_ADD_NEWLINE=false
SPACESHIP_PROMPT_SEPARATE_LINE=false

if test ! -f ~/.zsh_plugins -o ! -f ~/.zsh_plugins.tmux -o ! -f ~/.zsh_plugins.base; then
  echo "ohmyzsh/ohmyzsh path:plugins/tmux" > ~/.zsh_plugins.list

  echo "denysdovhan/spaceship-prompt" > ~/.zsh_plugins.tmux.list

  echo "michaelaquilina/zsh-you-should-use" >> ~/.zsh_plugins.base.list
  echo "aloxaf/fzf-tab" >> ~/.zsh_plugins.base.list
  echo "bigH/git-fuzzy path:bin kind:path" >> ~/.zsh_plugins.base.list
  echo "zsh-users/zsh-autosuggestions" >> ~/.zsh_plugins.base.list
  echo "zsh-users/zsh-completions" >> ~/.zsh_plugins.base.list
  echo "zsh-users/zsh-history-substring-search" >> ~/.zsh_plugins.base.list
  echo "zdharma/fast-syntax-highlighting" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/asdf" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/brew" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/common-aliases" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/docker" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:lib/git.zsh" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/git" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/git-auto-fetch" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/git-flow" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/gitignore" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/httpie" >> ~/.zsh_plugins.base.list
  echo "ohmyzsh/ohmyzsh path:plugins/npm" >> ~/.zsh_plugins.base.list

  echo -n "Installing startup plugins..."
  antibody bundle < ~/.zsh_plugins.list > ~/.zsh_plugins
  echo -en "\\rInstalling plugins...        "
  antibody bundle < ~/.zsh_plugins.tmux.list > ~/.zsh_plugins.tmux
  antibody bundle < ~/.zsh_plugins.base.list > ~/.zsh_plugins.base
  echo -e "\\rReady                 "

  rm -rf ~/.zsh_plugins.list
  rm -rf ~/.zsh_plugins.tmux.list
  rm -rf ~/.zsh_plugins.base.list
fi

if test -d /opt/homebrew/bin; then
  export PATH="/opt/homebrew/bin:$PATH"
fi

if test -z "$TMUX" -a -z "$TERM_PROGRAM" -a ! -f ~/no-tmux; then
  source ~/.zsh_plugins
fi

source ~/.zsh_plugins.base
# Setup starship
if test ! -f ~/.no-starship -a -n "$(command -v starship)"; then
  . <(starship init zsh)
else
  source ~/.zsh_plugins.tmux
fi

. $HOME/$DOTFILES_NAME/configs/zsh/aliases
. $HOME/$DOTFILES_NAME/configs/zsh/functions
. $HOME/$DOTFILES_NAME/configs/zsh/fuzzy
. $HOME/$DOTFILES_NAME/configs/zsh/variables

# Use personalize settings if found as well
test -f ~/.personal && source ~/.personal

# Use fzf if found
test -f ~/.fzf.zsh && source ~/.fzf.zsh

# Setup hstr
if test -n "$(command -v hstr)"; then
  . <(hstr --show-zsh-configuration)
fi

# Setup github cli
if test -n "$(command -v gh)"; then
  . <(gh completion -s zsh)
fi

# Export binaries
export PATH=$HOME/$DOTFILES_NAME/bin:$PATH

