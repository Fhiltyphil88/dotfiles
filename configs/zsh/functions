#!/bin/bash
_docker-run() {
  if tty -s; then
    docker run -it --rm $@
  else
    docker run -i --rm $@
  fi
}

_try-docker-run() {
  local imageName="$1"
  local buildPath="$2"
  shift
  shift
  if test "$(docker images -q "$imageName")" = ""; then
    docker build -t "$imageName" "$buildPath"
  fi
  _docker-run $@
}

_try-cmd() {
  local cmd="$1"
  shift
  if test ${+commands[$cmd]} -eq 1; then
    ${commands[$cmd]} $@
    return 0
  fi
  return 1
}

flashlight() {
  local duration=10
  if test $# -gt 0; then
    duration="$1"
  fi
  printf "$(tput setab 7)$(tput clear)" && sleep $duration
}

keep() {
  if test $# -eq 0; then
    echo -e "No arguments specified. usage:\necho keep /tmp/test.md\ncat /tmp/test.md | keep test.md"
    return 1
  fi
  tmpfile=$(mktemp -t transferXXX);
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://free.keep.sh/$basefile" >> $tmpfile
  else
    curl --progress-bar --upload-file "-" "https://free.keep.sh/$1" >> $tmpfile
  fi
  cat $tmpfile
  rm -f $tmpfile
}

# Transfer.sh will not be available after October 2020
transfer() {
  if test $# -eq 0; then
    echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
    return 1
  fi
  tmpfile=$(mktemp -t transferXXX);
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile
  fi
  cat $tmpfile
  rm -f $tmpfile
}

map() {
  if test `command -v npx`; then
    npx mapscii
    return
  fi
  docker info >/dev/null 2>&1
  if test $? -eq 0; then
    docker run -it --rm --name map-cli node:lts-alpine npx mapscii
    return
  fi
  if test `command -v telnet`; then
    telnet mapscii.me
  fi
}

_run-docker-graphviz() {
  local cmd="$1"
  shift
  _try-docker-run graphviz:latest ${HOME}/$DOTFILES_NAME/docker/graphviz --name graphviz -v $(pwd):/data --entrypoint $cmd graphviz $@
}

dot() {
  if _try-cmd dot $@; then
    return $?
  fi
  _run-docker-graphviz dot $@
}

neato() {
  if _try-cmd neato $@; then
    return $?
  fi
  _run-docker-graphviz neato $@
}

neomutt() {
  if _try-cmd neomutt $@; then
    return $?
  fi
  _try-docker-run neomutt:latest ${HOME}/$DOTFILES_NAME/docker/neomutt --name neomutt -v ${HOME}/$DOTFILES_NAME/binaries/passmgr:/usr/bin/passmgr -v ${HOME}/.cache/neomutt:/root/.cache/neomutt -v ${HOME}/.config/neomutt:/root/.config/neomutt -v ${HOME}/.config/neomutt/accounts/default:/root/.config/neomutt/accounts/default -v ${HOME}/.secret:/root/.secret neomutt $@
}

doctl() {
  if _try-cmd doctl $@; then
    return $?
  fi
  local dockerConfigPath="$(printf "%s" ~)/.docker/config.json"
  _docker-run -e "DIGITALOCEAN_ACCESS_TOKEN=$DIGITALOCEAN_ACCESS_TOKEN" -v "$dockerConfigPath":/root/.docker/config.json -v ~/.ssh/id_rsa:/root/.ssh/id_rsa -v ~/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub digitalocean/doctl $@
}

mmdc() {
  if _try-cmd mmdc $@; then
    return $?
  fi
  _docker-run -v $(pwd):/data minlag/mermaid-cli $@
}

slack-term() {
  if _try-cmd slack-term $@; then
    return $?
  fi
  _docker-run --name slack-term -v ${HOME}/.config/slack-term/config:/config erroneousboat/slack-term $@
}
