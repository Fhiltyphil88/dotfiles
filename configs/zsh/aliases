#!/bin/bash
DOTFILES_NAME=.dots

# Ctrl+Z will send the process to background, use "resume" to bring it back
alias resume="fg"

# Kill the annoyance
alias ga.='ga .'

# Shortcuts
alias reloaddns="dscacheutil -flushcache && sudo killall -HUP mDNSResponder"
alias reloadzshplugins="rm -f ~/.zsh_plugins ~/.zsh_plugins.tmux && source ~/.zshrc"
alias flashlight="printf \"$(tput setab 7)$(tput clear)\" && sleep 10"

alias dr="defaults read"
alias dw="defaults write"

# exa (ls replacement)
alias ls="exa"
alias l="exa -lFh --git"
alias la="exa -laFh --git"
alias ll="exa -l --git"

# bat (cat replacement)
alias cat="bat"

alias news="curl -sSL hackurls.com/ascii | less"
alias reddit="ssh redditbox.us"

# unicode test
alias utf8demo="curl -sSL https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt"
alias quickbrown="curl -sSL https://www.cl.cam.ac.uk/~mgk25/ucs/examples/quickbrown.txt"

# termbin (pipe text to this alias)
alias tb="nc termbin.com 9999"

# show public ip
if test `command -v curl`; then
  alias myip="curl eth0.me"
else
  alias myip="echo GET / | nc eth0.me 80"
fi

# Docker
alias d='docker'

transfer() {
  if test $# -eq 0; then
    echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
    return 1
  fi
  tmpfile=$(mktemp -t transferXXX);
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile
  fi
  cat $tmpfile
  rm -f $tmpfile
}

map() {
  if test `command -v npx`; then
    npx mapscii
    return
  fi
  docker info >/dev/null 2>&1
  if test $? -eq 0; then
    docker run -it --rm --name map-cli node:lts-alpine npx mapscii
    return
  fi
  if test `command -v telnet`; then
    telnet mapscii.me
  fi
}

_test_alias() {
  test ${+aliases[$1]} -eq 1
}

_toggle_alias() {
  if _test_alias $1; then
    unalias $1
    echo alias $1 unset
  else
    alias $1=$2
    echo alias $1 set
  fi
}

docker-aliases() {
  # Test if docker is running or not
  docker info >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    # Docker is not running, no alias set
    return
  fi

  # Docker is running, setting aliases to use Docker instead
  if [ "$(arch)" = "armv7l" ]; then
    # Raspberry Pi variant
    _toggle_alias mysql "docker run -it --rm --name mysql-cli jsurf/rpi-mariadb mysql"
  else
    _toggle_alias mysql "docker run -it --rm --name mysql-cli mysql:5.7 mysql"
  fi

  _toggle_alias node "docker run -it --rm --name node-cli -v \$(pwd):/opt/app:delegated -w /opt/app node:lts-alpine node"
  _toggle_alias npm "docker run -it --rm --name npm-cli -p 8000:8000 -v \$(pwd):/opt/app:delegated -w /opt/app node:lts-alpine npm"
  _toggle_alias python2 "docker run -it --rm --name python2-cli -v \$(pwd):/opt/app:delegated -w /opt/app python:2-alpine python"
  _toggle_alias python3 "docker run -it --rm --name python3-cli -v \$(pwd):/opt/app:delegated -w /opt/app python:3-alpine python"
  _toggle_alias terraform "docker run -it --rm --name terraform-cli -v \$(pwd):/opt/app:delegated -w /opt/app hashicorp/terraform"
  _toggle_alias sqlite3 "docker run -it --rm --name sqlite3-cli -v \$(pwd):/opt/app:delegated -w /opt/app nouchka/sqlite3"
  _toggle_alias redis-cli "docker run -it --rm --name redis-cli redis:alpine redis-cli"
  _toggle_alias mongo "docker run -it --rm --name mongo-cli webhippie/mongodb mongo"
  _toggle_alias codeclimate "docker run -it --rm -e CODECLIMATE_CODE=\"\$PWD\" -v \"\$PWD\":/code -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/cc:/tmp/cc codeclimate/codeclimate"
  _toggle_alias build-wtfutil "curl -sSL https://raw.githubusercontent.com/wtfutil/wtf/master/Dockerfile | docker build --build-arg=version=v0.26.0 -t wtfutil -"
  _toggle_alias wtfutil "docker run -it --rm --name wtfutil -v ${HOME}/$DOTFILES_NAME/wtfutil/config.yml:/config/config.yml wtfutil --config=/config/config.yml"
  _toggle_alias browsh "docker run -it --rm browsh/browsh"
  _toggle_alias consul "docker run --net=host -it --rm --name consul-cli consul"
  _toggle_alias consul-template "docker run --net=host -it --rm -v \$(pwd):/opt/app -w /opt/app --name consul-template hashicorp/consul-template:alpine consul-template"

  # Docker version of tools
  _toggle_alias docker-consul "docker run -d -p 8500:8500 --rm --name consul consul"
  _toggle_alias docker-redis "docker run -d -p 6379:6379 --rm --name redis redis:alpine"
  _toggle_alias docker-redis-cluster "docker run -d -p 7000-7050:7000-7050 -p 5000-5010:5000-5010 --rm --name redis-cluster grokzen/redis-cluster"
  _toggle_alias docker-mongo "docker run -d -p 27017:27017 --rm --name mongo webhippie/mongodb"
  _toggle_alias docker-mysql "docker run -d -p 3306:3306 --rm -e MYSQL_ROOT_PASSWORD=root -v ${HOME}/mysql/data:/var/lib/mysql -v ${HOME}/$DOTFILES_NAME/mysql/config:/etc/mysql/conf.d --name mysql mysql:5.7"

  # Shortcut
  _toggle_alias docker-update "(docker images --format \"{{.Repository}}:{{.Tag}}\" | xargs -n1 docker pull) && (docker rmi \$(docker images -f \"dangling=true\" -q))"
}

_ghs_usage() {
  echo "USAGE"
  echo "  ghs [flags] <query>..."
  echo
  echo "FLAGS"
  echo "  -h, --help              Show this message"
  echo "  -L, --limit=<limit>     Maximum number of items to fetch (default 30)"
  echo "  -R, --repo=<OWNER/REPO> Select another repository using the OWNER/REPO format"
  echo
  echo "QUERY"
  echo "  If a query is empty, it will default to \"is:open\""
  echo
  echo "  If a query contains a repo filter, it will take priority over the flags"
}

ghs() {
  local limit=30
  local repo=""
  local debug=0
  while test "$1" != ""; do
    local PARAM=`echo $1 | sed 's/=.*//g'`
    local VALUE=`echo $1 | sed 's/^[^=]*=//g'`
    local EQUAL_SIGN=`echo $1 | sed 's/[^=]//g'`
    case $PARAM in
      -h | --help)
        _ghs_usage
        return
        ;;
      -L | --limit)
        if test -z "$EQUAL_SIGN"; then
          echo "ERROR: a limit is required (perhaps missing an equal sign?)"
          return 1
        fi
        limit=$VALUE
        ;;
      -R | --repo)
        if test -z "$EQUAL_SIGN"; then
          echo "ERROR: a repository is required (perhaps missing an equal sign?)"
          return 1
        fi
        repo=" repo:$VALUE"
        ;;
      --debug)
        debug=1
        ;;
      -*)
        echo "ERROR: unknown flag \"$1\""
        return 1
        ;;
      *)
        break
        ;;
    esac

    shift
  done

  local query="$@"
  if test -z "$query"; then
    query="is:open"
  fi
  local repo_filter=`echo $query | sed -n '/repo:[^ ]*/p'`
  if test -n "$repo_filter"; then
    repo=""
  fi
  if test $debug -eq 1; then
    echo "[limit=$limit] $query$repo"
    return
  fi
  gh api graphql -F q="$query$repo" -f query='query($q: String!){search(query:$q,type:ISSUE,first:30){nodes{...on Issue{type:__typename,title,number,state},...on PullRequest{type:__typename,title,number,state}}}}' | jq -r '.data.search.nodes[] | "\(.state)|\(.type | gsub("Issue";"") | gsub("^P[a-z]*R[a-z]*$";"PR"))|\(.number)|\(.title)"' | awk 'BEGIN{FS="|"} {printf("%-6s %2s#%-5d %s\n", $1, $2, $3, $4)}'
}

# github cli - issues
alias iscl="gh issue close"
alias isc="gh issue create"
alias isl="gh issue list"
alias isr="gh issue reopen"
alias iss="gh issue status"
alias isv="gh issue view"

# github cli - pull requests
alias pra="gh pr checks"
alias prc="gh pr create"
alias prch="gh pr checks"
alias prcl="gh pr close"
alias prco="gh pr checkout"
alias prd="gh pr diff"
alias prl="gh pr list"
alias prm="gh pr merge"
alias prr="gh pr review"
alias prs="gh pr status"
alias prv="gh pr view"

unalias vol >/dev/null 2>/dev/null
if [ "$(uname)" = "Darwin" ]; then
  vol() {
    osascript -e "set Volume $((($1 + 5) / 10))"
  }
else
  alias vol="amixer set Master"
fi

# TMUX
alias tmux="tmux -2"

# NVIM
alias vim="nvim"
alias vi="nvim"
alias nvim-profile="nvim --startuptime vim.log -c 'qa!' && cat vim.log && rm -f vim.log"
alias vim-profile="nvim-profile"
alias vi-profile="nvim-profile"

# lazygit
alias lg="lazygit"

# for opt + ← and opt + → to skip a word
bindkey '^[[1;3C' forward-word
bindkey '^[[1;3D' backward-word
