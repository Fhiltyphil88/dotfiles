#!/bin/bash

usage() {
  echo "USAGE"
  echo "  prcm [flags] <pr number>"
  echo
  echo "FLAGS"
  echo "  -h, --help              Show this message"
  echo "  -R, --repo=<OWNER/REPO> Select another repository using the OWNER/REPO format"
  echo
  echo "QUERY"
  echo "  If a repo flag is passed, it will take priority over auto-detect one."
}

_cat() {
  printf "%b" "$@" | sed 's/^"//g' | sed 's/"$//g' | bat -l md --paging never --color always --style changes
  return
}

_diff() {
  local filename="$1"
  shift
  printf "%b" "$@" | sed 's/^"//g' | sed 's/"$//g' | bat --file-name $filename --paging never --color always --style changes,header
  return
}

main() {
  local repo=""
  local debug=0
  while test "$1" != ""; do
    local param=$(printf "%s" "$1" | sed 's/=.*//g')
    local value=$(printf "%s" "$1" | sed 's/^[^=]*=//g')
    local equal_sign=$(printf "%s" "$1" | sed 's/[^=]//g')
    case $param in
      -h | --help)
        usage
        return
        ;;
      --internal)
        if test -z "$equal_sign"; then
          return 1
        fi
        shift
        if test "$value" = "diff"; then
          local arg="$1"
          shift
          "_$value" "$arg" "$(echo $@)"
        else
          "_$value" "$(echo $@)"
        fi
        return
        ;;
      -R | --repo)
        if test -z "$equal_sign"; then
          echo "ERROR: a repository is required (perhaps missing an equal sign?)"
          return 1
        fi
        repo="$value"
        ;;
      --debug)
        debug=1
        ;;
      -*)
        echo "ERROR: unknown flag \"$1\""
        return 1
        ;;
      *)
        break
        ;;
    esac

    shift
  done

  local number="$@"
  if test -z "$number"; then
    echo 'PR number is required'
    return 1
  fi

  local repo_owner=""
  local repo_name=""
  if test "$repo" = ""; then
    source _git_helper
    repo_owner=$(get_repo_owner)
    repo_name=$(get_repo_name)
  else
    repo_owner=$(echo $repo | cut -d'/' -f1)
    repo_name=$(echo $repo | cut -d'/' -f2)
  fi
  if test "$repo_owner" = "" -o "$repo_name" = ""; then
    echo "ERROR: Both repository owner name repository name is required (perhaps it is not in the \"owner/repo\" format?)"
    return 1
  fi

  if test $debug -eq 1; then
    echo "#$number in $repo_owner/$repo_name"
    return
  fi
  local graph_query=$(cat ~/.dots/binaries/_ticket_comment.graphql)
  local response=$(gh api graphql -F limit="50" -F owner="$repo_owner" -F name="$repo_name" -F number="$number" -f query="$graph_query")
  if [ $? -ne 0 ]; then
    return 1
  fi

  echo "$response" | NUMBER="$number" gomplate -f ~/.dots/binaries/_timeline_item.tmpl --plugin tkcm="$HOME/.dots/binaries/tkcm" -d 'number=env:///NUMBER' -d 'response=stdin:///in.json'
  return
}

main $@
